package com.ut.scf.web.controller;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Map;

import javax.imageio.stream.FileImageOutputStream;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import sun.misc.BASE64Decoder;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Image;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.pdf.PdfWriter;
import com.ut.scf.core.dict.ErrorCodeEnum;
import com.ut.scf.core.dict.ScfCacheDict;
import com.ut.scf.core.util.ScfUUID;
import com.ut.scf.respbean.BaseRespBean;
import com.ut.scf.respbean.sys.FileRespBean;

@Controller
@RequestMapping("/file")
public class FileUploadController extends BaseJsonController {

	private static final Logger log = LoggerFactory
			.getLogger(FileUploadController.class);

	@RequestMapping(value = "/binUpload", method = RequestMethod.POST)
	public @ResponseBody BaseRespBean binUpload(
			@RequestParam(value = "file", required = false) MultipartFile file,
			HttpServletRequest request, HttpServletResponse response) {
		// 得到文件服务器存储目录
		String uploadFilePath = getUploadFilePath(request);

		String path = request.getSession().getServletContext()
				.getRealPath(uploadFilePath);
		String uploadName = file.getOriginalFilename();
		int idx = uploadName.lastIndexOf(".");
		String suffix = uploadName.substring(idx).toLowerCase();// 获得上传的图片的后缀名
		String fileName = ScfUUID.generate() + suffix;
		File targetFile = new File(path, fileName);

		if (!targetFile.exists()) {
			targetFile.mkdirs();
		}

		FileRespBean resp = new FileRespBean();
		try {
			file.transferTo(targetFile);

		} catch (Exception e) {
			log.error("parse file exception", e);
			resp.setResult(ErrorCodeEnum.FAILED);
			return resp;

		}
		String[] tempStrs = fileName.split("\\.");
		resp.setFileSize(targetFile.length());
		resp.setFileName(uploadName);
		resp.setFileType(tempStrs[1]);
		resp.setFileUrl(request.getContextPath() + "/" + uploadFilePath
				+ fileName);
		return resp;
	}

	@RequestMapping(value = "/base64Upload", method = RequestMethod.POST)
	public @ResponseBody BaseRespBean base64Upload(HttpServletRequest request,
			HttpServletResponse response) {
		// 得到文件服务器存储目录
		String uploadFilePath = getUploadFilePath(request);

		FileRespBean resp = new FileRespBean();
		String filePath = request.getSession().getServletContext()
				.getRealPath(uploadFilePath);
		String uploadName = request.getParameter("fileName");
		int idx = uploadName.lastIndexOf(".");
		String suffix = uploadName.substring(idx);// 获得上传的图片的后缀名
		String fileName = ScfUUID.generate() + suffix;
		String file = request.getParameter("fileBase64");
		// 只允许image
		String header = "data:image";
		String[] fileArr = file.split(",");
		if (fileArr[0].contains(header)) {
			// 去掉头部
			file = fileArr[1];
			BASE64Decoder decoder = new BASE64Decoder();
			try {
				byte[] decodedBytes = decoder.decodeBuffer(file);
				String imgFilePath = filePath + File.separator + fileName;
				File targetFile = new File(filePath);
				if (!targetFile.exists()) {
					targetFile.mkdirs();
				}

				FileOutputStream out = new FileOutputStream(imgFilePath);
				out.write(decodedBytes);
				out.close();
				resp.setFileUrl(imgFilePath);

			} catch (Exception e) {
				resp.setResult(ErrorCodeEnum.FAILED);
			}

		}
		return resp;
	}

	/**
	 * 得到文件服务器存储目录
	 * 
	 * @param request
	 * @return
	 */
	private String getUploadFilePath(HttpServletRequest request) {
		// 得到路径规则
		int pathId = 0; // 通用目录
		try {
			pathId = Integer.parseInt(request.getParameter("pathId"));
		} catch (Exception e) {
			log.warn("parse file path exception", e);
		}

		// 如果字典中没有目录规则，选择通用目录
		String uploadFilePath;
		if (!ScfCacheDict.uploadFilePathMap.containsKey(pathId)) {
			uploadFilePath = "uploadFile/common/";
		} else {
			uploadFilePath = ScfCacheDict.uploadFilePathMap.get(pathId)
					.getPathRule();
		}

		return uploadFilePath;
	}

	@RequestMapping("/exportPdf")
	public @ResponseBody String exportPdf(
			MultipartHttpServletRequest multipartHttpServletRequest,
			HttpServletResponse response, HttpServletRequest request)
			throws ServletException, IOException {
		String uploadFilePath = "uploadFile/common/";

		String path = request.getSession().getServletContext()
				.getRealPath(uploadFilePath);
		// 得到文件服务器存储目录

		String filePath = path + "/ht.pdf";
		String imagePath = path + "/ht.bmp";
		Document document = new Document();
		try {
			Map getMap = multipartHttpServletRequest.getFileMap();
			MultipartFile mfile = (MultipartFile) getMap.get("imgData"); // 获取数据
			InputStream file = mfile.getInputStream();
			byte[] fileByte = FileCopyUtils.copyToByteArray(file);

			FileImageOutputStream imageOutput = new FileImageOutputStream(
					new File(imagePath));// 打开输入流
			imageOutput.write(fileByte, 0, fileByte.length);// 生成本地图片文件
			imageOutput.close();

			PdfWriter.getInstance(document, new FileOutputStream(filePath)); // itextpdf文件
			document.setPageSize(PageSize.A4);
			document.open();
			Image image = Image.getInstance(imagePath); // itext-pdf-image
			float heigth = image.getHeight();
			float width = image.getWidth();
			int percent = getPercent2(heigth, width); // 按比例缩小图片
			image.setAlignment(Image.MIDDLE);
			image.scalePercent(percent + 3);
			document.add(image);
			document.close();
			return filePath;
		} catch (DocumentException de) {
			System.err.println(de.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
		}
		return "error";

	}

	private static int getPercent2(float h, float w) {
		int p = 0;
		float p2 = 0.0f;
		p2 = 530 / w * 100;
		p = Math.round(p2);
		return p;
	}

}
