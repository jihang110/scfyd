package com.ut.scf.service.project.impl;

import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.activiti.engine.ProcessEngine;
import org.activiti.engine.RuntimeService;
import org.activiti.engine.TaskService;
import org.activiti.engine.history.HistoricTaskInstance;
import org.activiti.engine.history.HistoricVariableInstance;
import org.activiti.engine.impl.util.json.JSONObject;
import org.activiti.engine.runtime.ProcessInstance;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.ut.scf.core.dict.ErrorCodeEnum;
import com.ut.scf.core.dict.PageInfoBean;
import com.ut.scf.core.exception.BizException;
import com.ut.scf.dao.auto.DykRateMapper;
import com.ut.scf.dao.auto.FinanceInfoMapper;
import com.ut.scf.dao.auto.GuaranteeInfoMapper;
import com.ut.scf.dao.auto.GuaranteeMoneyManagementMapper;
import com.ut.scf.dao.auto.InterestManagementMapper;
import com.ut.scf.dao.project.IFinanceInfoDao;
import com.ut.scf.pojo.auto.DykRate;
import com.ut.scf.pojo.auto.DykRateExample;
import com.ut.scf.pojo.auto.FinanceInfo;
import com.ut.scf.pojo.auto.GuaranteeInfo;
import com.ut.scf.pojo.auto.GuaranteeMoneyManagement;
import com.ut.scf.pojo.auto.InterestManagement;
import com.ut.scf.pojo.auto.InterestManagementExample;
import com.ut.scf.pojo.auto.InterestManagementExample.Criteria;
import com.ut.scf.reqbean.project.FinanceFlowReqBean;
import com.ut.scf.reqbean.project.FinanceInfoListReqBean;
import com.ut.scf.respbean.BaseRespBean;
import com.ut.scf.respbean.ListRespBean;
import com.ut.scf.respbean.PageRespBean;
import com.ut.scf.respbean.StringRespBean;
import com.ut.scf.respbean.project.FinanceFlowRespBean;
import com.ut.scf.respbean.project.FinanceInfoRespBean;
import com.ut.scf.service.project.IFinanceInfoService;

@Service("financeInfoService")
public class FinanceInfoServiceImpl implements IFinanceInfoService {

	private static final Logger log = LoggerFactory.getLogger(FinanceInfoServiceImpl.class);

	@Resource
	private IFinanceInfoDao financeInfoDao;
	
	@Resource
	private GuaranteeMoneyManagementMapper guaranteeMapper;
	
	@Resource
	private InterestManagementMapper interestMapper;
	
	@Resource
	private DykRateMapper dykRateMapper;
	
	@Resource
	private ProcessEngine processEngine;
	
	@Resource
	private TaskService taskService;
	
	@Resource
	private RuntimeService runtimeService;
	
	@Resource
	private FinanceInfoMapper financeInfoMapper;
	
	@Resource
	private GuaranteeInfoMapper guaranteeInfoMapper;
	
	private static SimpleDateFormat SDF = new SimpleDateFormat("yyyy-MM-dd");

	/**
	 * 条件查询 分页获取financeInfo
	 * 
	 * @param paramMap
	 * @param page
	 */
	@Override
	@Transactional(readOnly = true)
	public BaseRespBean getFinanceInfoList(Map<String, Object> paramMap,
			PageInfoBean page) {
		List<Map<String, Object>> list = financeInfoDao.getFinanceInfoList(
				paramMap, page);
		PageRespBean respBean = new PageRespBean();
		respBean.setPages(page.getTotalPage());
		respBean.setRecords(page.getTotalRecord());
		respBean.setDataList(list);
		return respBean;
	}

	@Override
	public BaseRespBean getProGuarantee(FinanceInfoListReqBean reqBean) {
		FinanceInfoRespBean respBean = new FinanceInfoRespBean();
		// 保证金比例取得
		GuaranteeMoneyManagement guaranteeMoneyManagement = guaranteeMapper.selectByPrimaryKey(reqBean.getProductId());
		if (guaranteeMoneyManagement != null) {
			respBean.setGuaranteeRate(guaranteeMoneyManagement.getGuaranteeMoneyRate());
		}
		
		// 费率取得
		InterestManagementExample interestExample = new InterestManagementExample();
		Criteria criteria = interestExample.createCriteria();
		criteria.andProductIdEqualTo(reqBean.getProductId());
		List<InterestManagement> list = interestMapper.selectByExample(interestExample);
		if (CollectionUtils.isNotEmpty(list)) {
			respBean.setCostRate(list.get(0).getCostRate());
		}
		
		// 利息列表取得
		DykRateExample dykRateExample = new DykRateExample();
		com.ut.scf.pojo.auto.DykRateExample.Criteria criteria1 = dykRateExample.createCriteria();
		criteria1.andProductIdEqualTo(reqBean.getProductId());
		List<DykRate> list1 = dykRateMapper.selectByExample(dykRateExample);
		if (CollectionUtils.isNotEmpty(list1)) {
			respBean.setDataList(list1);
		}
		
		return respBean;
	}

	@Override
	public BaseRespBean getFinanceInfo(FinanceFlowReqBean flowReqBean) {
		String variable = "";
		if ("0".equals(flowReqBean.getHandleType())) {//融资申请
			variable = "agencyJson";
		} else if ("1".equals(flowReqBean.getHandleType())) {//登记保证金
			variable = "regGuarantee";
		} else if ("2".equals(flowReqBean.getHandleType())) {//审核
			variable = "reviewJson";
		}
		String str = (String) taskService.getVariable(flowReqBean.getTaskId(), variable);
		StringRespBean respBean = new StringRespBean();
		respBean.setStr(str);
		return respBean;
	}

	@Override
	public BaseRespBean applyGuarantee(JSONObject jsonObject) {
		BaseRespBean respBean = new BaseRespBean();
		// 1.获取taskId和userId
		String taskId = (String) jsonObject.get("taskId");
		String userId = (String) jsonObject.get("userId");
		// 2.拾取用户
		taskService.claim(taskId, userId);
		// 3.设置流程变量
		taskService.setVariable(taskId, "regGuarantee", jsonObject.toString());
		// 4.完成流程
		taskService.complete(taskId);
		return respBean;
	}

	@Override
	public BaseRespBean getReviewInfo(FinanceFlowReqBean flowReqBean) {
		String taskId = flowReqBean.getTaskId();
		String financeInfo = (String) taskService.getVariable(taskId, "agencyJson");
		String regGuaranteeInfo = (String) taskService.getVariable(taskId, "regGuarantee");
		String reviewInfo = (String) taskService.getVariable(taskId, "reviewJson");
		FinanceFlowRespBean respBean = new FinanceFlowRespBean();
		respBean.setFinanceApplyInfo(financeInfo);
		respBean.setRegGuaranteeInfo(regGuaranteeInfo);
		respBean.setReviewInfo(reviewInfo);
		return respBean;
	}

	@Override
	public boolean doAgree(JSONObject jsonObject) {
		
		// 1.获取taskId和当前用户
		String procInstId = (String) jsonObject.get("procInstId");
		String taskId = (String) jsonObject.get("taskId");
		String userId = (String) jsonObject.get("userId");
		String agree = (String) jsonObject.get("agree");
		String advice = (String) jsonObject.get("advice");
		String backTarget = jsonObject.isNull("backTarget") ?
				"" : (String) jsonObject.get("backTarget");
		
		if ("1".equals(agree)) {
			if ("0".equals(backTarget)) {
				agree = "2";
			} else if ("1".equals(backTarget)) {
				agree = "1";
			}
		}
		
		if (StringUtils.isNotEmpty(backTarget)) {
			if ("2".equals(agree)) {//融资申请
				String financeInfo = (String) taskService.getVariable(taskId, "agencyJson");
				JSONObject financeObj = new JSONObject(financeInfo);
				financeObj.put("advice", advice);
				taskService.setVariable(taskId, "agencyJson", financeObj.toString());
			} else if ("1".equals(agree)) {//登记保证金
				String guaranteeInfo = (String) taskService.getVariable(taskId, "regGuarantee");
				JSONObject guaranteeObj = new JSONObject(guaranteeInfo);
				guaranteeObj.put("advice", advice);
				taskService.setVariable(taskId, "regGuarantee", guaranteeObj.toString());
			}
		}
		
		// 2.拾取用户
		taskService.claim(taskId, userId);
		// 3.设置变量
		taskService.setVariable(taskId, "reviewJson", jsonObject.toString());
		// 4.流程走向
		taskService.setVariable(taskId, "agree", agree);
		// 5.完成流程
		taskService.complete(taskId);
		// 6.查看流程状态
		ProcessInstance pi = runtimeService.createProcessInstanceQuery()
			.processInstanceId(procInstId).singleResult();
		if (pi == null) { //流程已结束
			return true;
		}
		
		return false;
	}

	@Override
	public BaseRespBean getDataByTaskId(FinanceFlowReqBean reqBean) {
		// 根据taskId获取流程数据
		String agree = (String) taskService.getVariable(reqBean.getTaskId(), "agree");
		StringRespBean respBean = new StringRespBean();
		respBean.setStr(agree);
		return respBean;
	}
	
	@Override
	public BaseRespBean reApply(JSONObject jsonObject) {
		BaseRespBean respBean = new BaseRespBean(); 
		// 1.获取taskId和userId
		String taskId = (String) jsonObject.get("taskId");
		String userId = (String) jsonObject.get("userId");
		// 2.拾取用户
		taskService.claim(taskId, userId);
		// 3.设置流程变量
		taskService.setVariable(taskId, "agencyJson", jsonObject.toString());
		// 4.完成流程
		taskService.complete(taskId);
		return respBean;
	}
	
	@Override
	public BaseRespBean getAllHistoryVariable(FinanceFlowReqBean reqBean) {
		String procInstId = reqBean.getProcInstId();
		ListRespBean respBean = new ListRespBean();
		List<HistoricVariableInstance> historyList = processEngine.getHistoryService().createHistoricVariableInstanceQuery().processInstanceId(procInstId).list();
		List<Map<String, Object>> list = new ArrayList<Map<String,Object>>();
		for (HistoricVariableInstance historicVariableInstance : historyList) {
			Map<String, Object> historyMap = new HashMap<String, Object>();
			if(historicVariableInstance.getVariableName().equals("reviewJson")){
				Object value = historicVariableInstance.getValue();
				JSONObject jsonObject = new JSONObject(value.toString());
				if(jsonObject.has("advice")){
					String taskId = historicVariableInstance.getTaskId();
					HistoricTaskInstance task = processEngine.getHistoryService().createHistoricTaskInstanceQuery().taskId(taskId).list().get(0);
					historyMap.put("taskName", task.getName());
					historyMap.put("assignee", task.getAssignee());
					historyMap.put("createTime", historicVariableInstance.getCreateTime());
					historyMap.put("advice", jsonObject.get("advice"));
					historyMap.put("taskId", taskId);
					historyMap.put("hisId", historicVariableInstance.getId());
					list.add(historyMap);
				}
			}
		}
		respBean.setDataList(list);
		return respBean;
	}

	@Override
	public BaseRespBean addFinance(FinanceFlowReqBean reqBean) {
		BaseRespBean respBean = new BaseRespBean();
		// 新增融资情报
		FinanceInfo financeInfo = new FinanceInfo();
		try {
			financeInfo.setFinanceId("RZBH01");
			financeInfo.setApplyDate(SDF.parse(reqBean.getApplyDate()));
			financeInfo.setAgencyName("万邦");
			financeInfo.setAgencyNum("12345");
			financeInfo.setMaxCredit(new BigDecimal("1000000"));
			financeInfo.setAvailableCredit(new BigDecimal("1000000"));
			financeInfo.setFinanceRate(new BigDecimal(reqBean.getFinanceRate()));
			financeInfo.setCashRate(new BigDecimal(reqBean.getCashRate()));
			financeInfo.setFinanceStartDate(SDF.parse(reqBean.getFinanceStartDate()));
			financeInfo.setFinanceEndDate(SDF.parse(reqBean.getFinanceEndDate()));
			financeInfo.setFinanceAmount(new BigDecimal(reqBean.getFinanceAmount()));
			financeInfo.setExpense(new BigDecimal(reqBean.getExpense()));
			financeInfo.setFinanceStatus("1");
		} catch (Exception e) {
			log.error(e.getMessage());
		}
		int recFinance = financeInfoMapper.insert(financeInfo);
		if (recFinance < 1) {
			throw new BizException(ErrorCodeEnum.ADD_FAILED);
		}
		
		// 新增保证金情报
		GuaranteeInfo guaranteeInfo = new GuaranteeInfo();
		try {
			guaranteeInfo.setFinanceId("RZBH01");
			guaranteeInfo.setGuaranteeMoneyRate(new BigDecimal(reqBean.getGuaranteeRate()));
			guaranteeInfo.setPayAbleGuarantee(new BigDecimal(reqBean.getPayAbleGuarantee()));
			guaranteeInfo.setGuaranteePayDate(SDF.parse(reqBean.getGuaranteePayDate()));
			guaranteeInfo.setPayActGuarantee(new BigDecimal(reqBean.getGuaranteeAccountAmt()));
			guaranteeInfo.setGuaranteeBalance(new BigDecimal(reqBean.getGuaranteeAccountAmt()));
			guaranteeInfo.setGuaranteePayHis(reqBean.getGuaranteePayHis());
		} catch (Exception e) {
			log.error(e.getMessage());
		}
		int recGuarantee = guaranteeInfoMapper.insert(guaranteeInfo);
		if (recGuarantee < 1) {
			throw new BizException(ErrorCodeEnum.ADD_FAILED);
		}
		
		return respBean;
	}
}
